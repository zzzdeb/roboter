// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

	.text
	.syntax	unified
	.align	4
	.thumb

	// ------------------------------------------------------------------------
	/**
	 * @brief	Hard fault handler
	 *
	 * Prepares data for the C output handler
	 */
	.global	HardFault_Handler
	.type	HardFault_Handler, %function
	.thumb_func
	.func	HardFault_Handler
HardFault_Handler:

	/* When a hard fault occurs, this handler will move the stack pointer around.
 	 * This makes it harder to debug a hard fault with a real debugger, so if one is connected we would
	 * like to trigger a software breakpoint before moving the stack pointer.
	 * The decision to trigger the breakpoint needs to happen at runtime and not at compile time,
	 * since when a hard fault has been triggered, you want to debug the binary on the device and not
	 * compile a new binary with the breakpoint in it, which might then prevent the fault from occurring.
	 *
	 * The Cortex-M3 Core Debug module contains the "Debug Halting Control and Status Register" (DHCSR),
	 * which contains the `C_DEBUGEN` bit, which is set by the debugger to enable halting debug.
	 * "If halting debug is enabled [...], captured events will halt the processor in Debug state."
	 * You can test if halting debug is enabled using `(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)`.
	 *
	 * !!!WARNING:
	 *    "If DHCSR.C_DEBUGEN is clear and a breakpoint occurs in an NMI or HardFault exception handler,
	 *     the system locks up with an unrecoverable error."
	 *
	 * Since we are using a breakpoint inside the HardFault exception handler, we must therefore always
	 * check this flag, before executing the breakpoint.
	 *
	 * !!!WARNING:
	 *     On ARMv6-M "access to the DHCSR from software running on the processor is IMPLEMENTATION DEFINED."
	 *     This means, that on Cortex-M0, it might not be possible to read the DHCSR from software!
	 *
	 * Neither STM32F0 nor LPC11 implement this access!
	 *
	 * !!!WARNING:
	 *     OpenOcd does not reset the `C_DEBUGEN` bit on the `shutdown` command. This might be a bug.
	 *     A workaround is to issue `reset halt`, then manually reset the bits using `mww 0xE000EDF0 0xA05F0000`.
	 *     This will also clear the `C_HALT` bit and therefore this is equivalent to `reset run`.
	 *
	 * !!!WARNING:
	 *    `C_DEBUGEN` is sticky! It survives all resets but a power-on reset. This means that after debugging
	 *    either power cycle the target or manually clear `C_DEBUGEN` using `mww 0xE000EDF0 0xA05F0000`.
	 */
	mov lr, r0							// save register 0 into the link register
	ldr r0, =0xE000EDF0					// Load the address of the Debug Halting Control and Status Register (DHCSR)
	ldr r0, [r0, #0]					// load the content of DHCSR, we need to check if bit 0 is set
	lsls r0, #31						// test bit 0 by shifting it left 31 times, becoming sign bit
	mov r0, lr							// restore register 0 before triggering the breakpoint
	bpl no_debugger						// branch over breakpoint if lsls resulted in positive integer (MSB not set)

	ldr lr, =0xfffffff9					// restore link register for GDB
	bkpt #42							// trigger a break point, only if a debugger is connected

no_debugger:
	// Save the current main stack pointer into the PSP register.
	mov lr, r0							// save register 0 into the link register
	mov r0, sp							// move SP into r0
	msr psp, r0							// save SP into the process stack pointer (PSP)

	/* The LED blinking code consumes at most 32B of stack.
	 * If there is >32B of space on the main stack, we do not switch the
	 * stack pointer to the reserved hard fault handler stack.
	 * This way you can connect the GDB debugger and it recognizes the stack
	 * frames correctly, even while blinking the LED.
	 */
	ldr r0, =__stack_start
	sub sp, #32							// subtract 32B from the stack pointer
	cmp sp, r0							// compare: SP - R0 => pos. if space left
	add sp, #32							// undo the subtraction
	bpl use_main_stack					// do not switch stack, if there is enough space left
										// otherwise change SP to hard fault handler stack
	ldr r0, =__process_stack_top		// load the PSP value into register 0
	mov sp, r0							// write the current stack pointer to the new PSP value

use_main_stack:
	mov r0, lr							// restore register 0 from the LR

	/* This sets up and toggles an LED.
	 * The actual setup and toggle code is delegated to C++ world,
	 * so that the xpcc GPIO API can be used.
	 * This consumes very, very little stack, definitely less than 32B.
	 *
	 * This code clobbers R0,R1,R2 & R3, hopefully they were saved on exception entry.
	 * Note: We are restoring LR to enable GDB stack unwinding.
	 */
	ldr r0, =_initHardFaultHandlerLed
	blx r0 								// call Led::setOutput();
	ldr r0, =0xfffffff9					// ARMv6 cannot load directly into LR
	mov lr, r0							// restore link register for GDB
loop:
	ldr r0, =_ZN4xpcc5clock4fcpuE		// load xpcc::clock::fcpu
1:	subs r0, r0, #5						// subtract 5 from value
	bpl	1b								// loop while positive
	ldr r0, =_toggleHardFaultHandlerLed
	blx r0								// call Led::toggle();
	ldr r0, =0xfffffff9					// ARMv6 cannot load directly into LR
	mov lr, r0							// restore link register for GDB
	b loop								// loop forever

	.size	HardFault_Handler, . - HardFault_Handler
	.endfunc

	.end